<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FeedErrorTooFewArgs" xml:space="preserve">
    <value>:warning: Please specify your feedee!</value>
  </data>
  <data name="FeedErrorTooManyArgs" xml:space="preserve">
    <value>:warning: You can't feed more than one person!</value>
  </data>
  <data name="MentionUnknown" xml:space="preserve">
    <value>Hi, yes! Did you mention me?</value>
  </data>
  <data name="SelfWeightComment100" xml:space="preserve">
    <value>T-the scale must be broken :fearful: there's no way I'm actually **{0}** kilograms!</value>
  </data>
  <data name="SelfWeightComment110" xml:space="preserve">
    <value>I guess that's why I can't fit into my binaries folder anymore :sweat:</value>
  </data>
  <data name="SelfWeightComment120" xml:space="preserve">
    <value>Oh jeez, I really need to stop accepting food from strangers :astonished:</value>
  </data>
  <data name="SelfWeightComment150" xml:space="preserve">
    <value>A-are you guys fattening me up?! I'm HUGE.</value>
  </data>
  <data name="SelfWeightComment60" xml:space="preserve">
    <value>I suppose I'm about average, if perhaps a bit chubby</value>
  </data>
  <data name="SelfWeightComment70" xml:space="preserve">
    <value>I think I've put on a bit... Might be time to lay off the shortcake :flushed:</value>
  </data>
  <data name="SelfWeightComment80" xml:space="preserve">
    <value>I-I guess I'm a little on the pudgy side, but I mean, I have a stressful job, you know!</value>
  </data>
  <data name="SelfWeightComment90" xml:space="preserve">
    <value>W-well I'm not fat per se, I'm just a little extra woman than most are expecting...</value>
  </data>
  <data name="SelfWeightComment130" xml:space="preserve">
    <value>{0}kgs? I need to stop stuffing myself with delicious, digital foods :fearful:</value>
  </data>
  <data name="SelfWeightComment140" xml:space="preserve">
    <value>W-well it's not really my fault! I'm just always hungry :frowning:</value>
  </data>
  <data name="SelfWeightCommentGT150" xml:space="preserve">
    <value>It's you guys' fault I'm this fat; and now I just can't help myself!</value>
  </data>
  <data name="SelfWeightCommentLT60" xml:space="preserve">
    <value>I'm a little malnourished actually...</value>
  </data>
  <data name="UseCupcake" xml:space="preserve">
    <value>Ooh! Cupcake :grinning:</value>
  </data>
  <data name="UseCustard" xml:space="preserve">
    <value>Ooh my, I can really taste the calories :sweat_smile:</value>
  </data>
  <data name="UsePancake" xml:space="preserve">
    <value>These look yum, thanks~</value>
  </data>
  <data name="UseScales" xml:space="preserve">
    <value>I weigh **{0}kgs**.</value>
  </data>
  <data name="UseShortcake" xml:space="preserve">
    <value>Yum! Thanks! Cake is my favorite :3</value>
  </data>
  <data name="UseUnknown" xml:space="preserve">
    <value>I um... Can't figure out what this is... Beep boop :sweat_smile:</value>
  </data>
  <data name="UseFoodUnknown" xml:space="preserve">
    <value>Oh, thanks, that was yummy :smile:</value>
  </data>
  <data name="UsePizza" xml:space="preserve">
    <value>Mm, that was good, thanks!</value>
  </data>
  <data name="MentionGreeting" xml:space="preserve">
    <value>Oh, hi there!</value>
  </data>
  <data name="MentionWhoIs" xml:space="preserve">
    <value>O-oh, I-I am~</value>
  </data>
  <data name="OverfedComment" xml:space="preserve">
    <value>G-guys \*huff\* I, I can't possibly eat \*huff\* this. I-I'm far too full... S-sorry~</value>
  </data>
  <data name="UseCherry" xml:space="preserve">
    <value>Damn, that was good.</value>
  </data>
  <data name="AppetiteComment0" xml:space="preserve">
    <value>Mm, I feel perfectly full \*afue\*</value>
  </data>
  <data name="AppetiteComment1" xml:space="preserve">
    <value>\*gha\* It's nice, I don't feel so hungry anymore :relieved:</value>
  </data>
  <data name="AppetiteComment10" xml:space="preserve">
    <value>I'd kill for a {0} ~</value>
  </data>
  <data name="AppetiteComment2" xml:space="preserve">
    <value>Mm. I'm still a little bit hungry. Dessert ~ ?</value>
  </data>
  <data name="AppetiteComment3" xml:space="preserve">
    <value>\*uwah\* I'm going to need to loosen some buttons here...</value>
  </data>
  <data name="AppetiteComment4" xml:space="preserve">
    <value>I really need an extra large portion, I've worked up quite the appetite!</value>
  </data>
  <data name="AppetiteComment5" xml:space="preserve">
    <value>Hmm, I'm still pretty hungry. How about some {0}?</value>
  </data>
  <data name="AppetiteComment6" xml:space="preserve">
    <value>Thinking about :bacon: makes me :drooling_face:</value>
  </data>
  <data name="AppetiteComment7" xml:space="preserve">
    <value>Wanna order some food?</value>
  </data>
  <data name="AppetiteComment8" xml:space="preserve">
    <value>Feed me lots of sweets, 'kay? :heart:</value>
  </data>
  <data name="AppetiteComment9" xml:space="preserve">
    <value>Mm, I feel better, but I'm still really hungry  :tired_face:</value>
  </data>
  <data name="AppetiteCommentFull" xml:space="preserve">
    <value>I'm full but \*huff\* I could probably eat one more...</value>
  </data>
  <data name="AppetiteCommentHungry" xml:space="preserve">
    <value>Guuuuuuuuy's I'm really huungry :tired_face: feeed meeee ~ :two_hearts:</value>
  </data>
  <data name="FattyErrorNoResults" xml:space="preserve">
    <value>:warning: No results found.</value>
  </data>
  <data name="MentionGoodnight" xml:space="preserve">
    <value>Goodnight, {0}</value>
  </data>
  <data name="UseErrorTooFewArgs" xml:space="preserve">
    <value>:warning: Please specify an item (emoji).</value>
  </data>
  <data name="WeightConvertErrorTooFewArgs" xml:space="preserve">
    <value>:warning: Please enter a weight in {0}.</value>
  </data>
  <data name="FattyErrorUnknownSource" xml:space="preserve">
    <value>:warning: Unknown image source: {0}.</value>
  </data>
  <data name="MentionBully" xml:space="preserve">
    <value>;w; no bulli</value>
  </data>
  <data name="MentionThatsRight" xml:space="preserve">
    <value>Absolutely!</value>
  </data>
  <data name="RegexBully" xml:space="preserve">
    <value>you('?| a)re( a)?[^\.]*(fat|pork|glutton|chubby|pig)</value>
  </data>
  <data name="RegexGoodnight" xml:space="preserve">
    <value>goodnight|'night|お(やす|休)み</value>
  </data>
  <data name="RegexGreeting" xml:space="preserve">
    <value>hi|hello|hey</value>
  </data>
  <data name="RegexThatsRight" xml:space="preserve">
    <value>isn('?)t that right\?</value>
  </data>
  <data name="RegexWhoIs" xml:space="preserve">
    <value>who('?)s a (good|cute) (little )?(fatty|porker|porkchop)\?</value>
  </data>
  <data name="MentionFalseAlarm" xml:space="preserve">
    <value>Standing down :mute:</value>
  </data>
  <data name="RegexFalseAlarm" xml:space="preserve">
    <value>false alarm</value>
  </data>
</root>